Extension { #name : #SPMReport }

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForBehaviors: aBuilder [
	<inspectorPresentationOrder: 2 title: 'Behaviors'>

	^ SPMConvenience
		inspectionCodeList: aBuilder
		items: self allBehaviorNodes
]

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForCategories: aBuilder [
	<inspectorPresentationOrder: 1 title: 'Categories'>

	^ SPMConvenience
		inspectionCodeList: aBuilder
		items: self allCategoryNodes
]

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForMethodLeaves: aBuilder [
	<inspectorPresentationOrder: 0.6 title: 'Method Leaves'>

	^ aBuilder newTable
		items: self methodNodeLeaves;
		addColumn: ((SpImageTableColumn
			evaluated: [ :each | SPMConvenience ratioIcon: each ratio ]) 
			beNotExpandable;
			yourself);
		addColumn: ((SpStringTableColumn 
			evaluated: [ :each | each relevanceDescription ])
			width: 150;
			yourself);
		addColumn: ((SpStringTableColumn 
			title: 'Name'
			evaluated: [ :each | SPMConvenience codeNameMorphFor: each ])
			width: 400;
			yourself);
		addColumn: (SpStringTableColumn
			title: 'Tags'
			evaluated: [ :each | ' ' join: each nameTags ])
]

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForMethods: aBuilder [
	<inspectorPresentationOrder: 3 title: 'Methods'>

	^ SPMConvenience
		inspectionCodeList: aBuilder
		items: self allMethodNodes
]

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForNetRanking: aBuilder [
	<inspectorPresentationOrder: 0.7 title: 'Tally Leaves'>

	| topTen |
	topTen := ((self allTallyNodes reject:[:each | each netTally isZero ]) sorted: [ :a :b | a netTally > b netTally ]).

	^ aBuilder newTable
		items: topTen;
		addColumn: ((SpImageTableColumn
			evaluated: [ :each | SPMConvenience ratioIcon: each ratio ]) 
			beNotExpandable;
			yourself);
		addColumn: ((SpStringTableColumn 
			evaluated: [ :each | each relevanceDescription ])
			width: 150;
			yourself);
		addColumn: (SpStringTableColumn
			title: 'Net Tally'
			evaluated: [ :each | each netTally ]);
		addColumn: ((SpStringTableColumn 
			title: 'Name'
			evaluated: [ :each | SPMConvenience codeNameMorphFor: each methodNode ])
			width: 400;
			yourself);
		addColumn: (SpStringTableColumn
			title: 'Tags'
			evaluated: [ :each | ' ' join: each methodNode nameTags ]);
		addColumn: (SpStringTableColumn
			title: 'Is leaf?'
			evaluated: [ :each | each hasChildren ifTrue: [ 'No' ] ifFalse: [ 'Yes' ] ]);
		yourself
]

{ #category : #'*SaucoPerfMeter-Spec2' }
SPMReport >> inspectionForTallyTree: aBuilder [
	<inspectorPresentationOrder: 0.1 title: 'Tally tree'>

	| sortingBlock |
	sortingBlock := [ :a :b | a tally > b tally ].

	^ aBuilder newTree
		hideColumnHeaders;
		roots: (self rootTallyNodes sorted: sortingBlock);
		expandRoots;
		displayIcon: [ :each | SPMConvenience ratioIcon: each ratio ];
		display: [ :each | SPMConvenience tallyNodeMorphFor: each ];
		children: [ :each | each children sorted: sortingBlock ];
		yourself

]
